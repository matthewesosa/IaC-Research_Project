Description: This template describes the webserver, security groups and other resources.

Parameters:
  ProjectName:
    Description: the project name that will be at prefix of all defined resources.
    Type: String
  webServerAMIId:
    Description: AMI ID used for the EC2 instances.
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
  username:
    Description: db username
    Type: String 
  password:
    Description: db password
    Type: String  





Resources:

  # Security Group for the Application Load Balancer (ALB)
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all http traffic to the ALB
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress: #Defining inbound traffic, protocol and ports
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: #Defining outbound traffic, protocol and ports
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security group for the ResearchProject webServers(EC2 instances)
  webServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow only http to the webServer
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress: #Defining inbound traffic, protocol and ports
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: #Defining outbound traffic, protocol and ports
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0


  dbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic to the db
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress: #Defining inbound traffic, protocol and ports
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref webServerSecurityGroup



  dbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "Subnet group for RDS"
      DBSubnetGroupName: "Subnet Group"
      SubnetIds:
        - Fn::ImportValue: !Sub '${ProjectName}-PRIV-SUBNET-AZ-a'
        - Fn::ImportValue: !Sub '${ProjectName}-PRIV-SUBNET-AZ-b'

  mydb: 
    Type: "AWS::RDS::DBInstance"
    Properties: 
      VPCSecurityGroups:
        - Ref: dbSecurityGroup
      PubliclyAccessible: false
      MultiAZ: true
      AllocatedStorage: 10
      DBInstanceClass: db.t2.small
      Engine: "mysql"
      DBName: "test"
      MasterUsername: !Sub "${username}"
      MasterUserPassword: !Sub "${password}"
      DBSubnetGroupName: !Ref dbSubnetGroup
      Tags: 
        - 
          Key: "Name"
          Value: !Sub "${ProjectName} MySQL RDS"
#    DeletionPolicy: "Retain"



  ## IAM Roles/Policies 
  # Assigning an IAM role to the webServer(s)(EC2 instance(s)) that allows it to access S3 .
  S3BucketRole2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-Role2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

   #An IAM instance profile
  S3BucketInstanceProfile2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Ref: S3BucketRole2

  # this IAM policy permits the webServer(s)(EC2 instance(s)) to list items in S3
  S3BucketPolicy2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketPolicy2
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - arn:aws:s3:::iac-webappbucket
              - arn:aws:s3:::iac-webappbucket/*
      Roles:
        - Ref: S3BucketRole2




  ## The Launch Configuration for the Autoscaling Group 

  # This launch configuration will be used each time a webServer(EC2) is spin up in the autoscaling group.
  webServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras enable php7.2
          yum clean metadata
          yum install -y httpd php php-mysqlnd
          service httpd start
          chkconfig httpd on
          sudo aws s3 cp s3://iac-webappbucket --region eu-central-1 /var/www/html/ --recursive
      ImageId: !Ref webServerAMIId
      IamInstanceProfile: !Ref S3BucketInstanceProfile2
      SecurityGroups:
        - Ref: webServerSecurityGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: '/dev/sdk'
          Ebs:
            VolumeSize: '10'

        

 ## Defining the autoscaling group

  # AutoSscaling group for the IaC-ResearchProject
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${ProjectName}-PRIV-NETS'
      LaunchConfigurationName:
        Ref: webServerLaunchConfig
      MinSize: '2'
      MaxSize: '6'
      TargetGroupARNs:
        - Ref: ALBTargetGroup


  ## Load Balancer ##

  # Defining an Application Load Balancer(ALB) for both public subnets with the alreday defined load balancer security group attached
  webServerALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub '${ProjectName}-PUB-SUBNET-AZ-a'
        - Fn::ImportValue: !Sub '${ProjectName}-PUB-SUBNET-AZ-b'
      SecurityGroups:
        - Ref: ALBSecurityGroup



  ## Defining a 'Listner' for the Application Load Balancer(ALB) 

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: webServerALB
      Port: '80'
      Protocol: HTTP

  ##  Listener Rule for the Application Load Balancer

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1


  ## Target Group

  # The ALB target group that all the running webServers(EC2 instances should belong to);
  # the ALB also performs health  checks on the webServers on the  / path for response code 200 in every 10 seconds interval
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: '${ProjectName}-VPCID'

Outputs:
  webServerALBDNSName:
    Description: DNS name/public URL of the Application Load Balancer
    Value: !Join ['', ['http://', !GetAtt webServerALB.DNSName]]
    Export:
      Name: !Sub ${ProjectName}-ALB-DNSName

  dbInstanceEndpoint:
    Description: "Endpoint of the Mysql db Instance"
    Value: !GetAtt mydb.Endpoint.Address
    Export:
      Name: !Sub ${ProjectName}-mydb-Endpoint

  #webServerSecurityGroup-id:
    #Description: the id of the webServerSecurityGroup
    #Value: !Ref 'WebServerSecurityGroup'
    #Export:
      #Name: !Sub ${ProjectName}-webServerSecurityGroup-id

  #ALBSecurityGroup-id:
    #Description: the id of the ALBSecurityGroup 
    #Value: !Ref 'ALBSecurityGroup'
    #Export:
      #Name: !Sub ${ProjectName}-ALBSecurityGroup-id

 

